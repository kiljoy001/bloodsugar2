using System.Windows.Forms;
using System.Data.SQLite;
using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Forms.DataVisualization.Charting;
using System.IO;


namespace bloodsugar_2
{

    public partial class mainForm : Form
    {
        Dictionary<long, string> tempStorage = new Dictionary<long, string>();
        TestResult mainModel = new TestResult();
        List<long> retrivedDates = new List<long>();
        //returns an array of names that match *sqlite in the My Documents directory.
        string[] dbName = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),"*.sqlite",SearchOption.TopDirectoryOnly );
        public mainForm()
        {
            InitializeComponent();

            if (String.IsNullOrEmpty(mainModel.Database))
            {
                DialogResult startNewDB = MessageBox.Show("There is no data loaded, would you like to create a new database?", "No Database Loaded", MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk);
                if(startNewDB == DialogResult.OK)
                {
                    saveDBDialog();
                }
            }

            if (tempStorage.Count == 0)
            {
                mainModel.readIt(tempStorage);
            }
            mainModel.chartIt(chartResults, tempStorage);
        }
        //helper method to create a basic interger boolean value to be stored in the database
        private int isFasting()
        {
            if(rdoFasting.Checked)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        public void dbcreate(string input)
        {
            if (String.IsNullOrWhiteSpace(input))
            {
                //default file name
                SQLiteConnection.CreateFile("database.sqlite");
            }
            else
            {
                //Create the database with a chosen username
                SQLiteConnection.CreateFile(input + ".sqlite");
            }
            
            //Connection String
            SQLiteConnection dbConnect;
            dbConnect = new SQLiteConnection("Data Source=" + input+";Version=3;");
            //Open for business!
            dbConnect.Open();
            //Table Creation
            string createTable = "CREATE TABLE result (date TIMESTAMP PRIMARY KEY DEFAULT(STRFTIME('%s', 'now')) , testResult TEXT, fasting INTEGER)";
            SQLiteCommand newTable = new SQLiteCommand(createTable, dbConnect);
            newTable.ExecuteNonQuery();
            //Close the connection.
            dbConnect.Close();
        }// returns a string from a datetime object
        private string DateTimeSQLite(DateTime datetime)
        {
            string dateTimeFormat = "{0}-{1}-{2} {3}:{4}:{5}.{6}";
            return string.Format(dateTimeFormat, datetime.Year, datetime.Month, datetime.Day, datetime.Hour, datetime.Minute, datetime.Second, datetime.Millisecond);
        }
        private void searchDateOnChange(object sender, EventArgs e)
        {
            //gets value from the control
            DateTime selectedDate = findDate.Value;
            //pulls internal dictionary from testresult class and adds it to a local dictionary for the method
            Dictionary<long, string> checkDate = mainModel.Map;
            
            //check if there is anything in the list, and if not populates it
            if (retrivedDates.Count <= 0 )
            {
                foreach (KeyValuePair<long, string> entry in checkDate)
                {
                    retrivedDates.Add(entry.Key);
                }
                foreach (long items in retrivedDates)
                {
                    long dbDate = 0;
                    string dbResult = null;
                    int dbFast = 0;

                    using (SQLiteConnection dbConnect = new SQLiteConnection("Data Source=database.sqlite; Version=3;"))
                    {
                        dbConnect.Open();
                        
                        using (SQLiteCommand compareDates = new SQLiteCommand(dbConnect))
                        {
                            SQLiteParameter findDate = new SQLiteParameter();
                            compareDates.CommandText = "SELECT date, testResult, fasting FROM result WHERE date <= @selectedDateValue";
                            compareDates.Parameters.AddWithValue("@selectedDateValue", System.Data.DbType.String).Value = items;
                            using (SQLiteDataReader reader = compareDates.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    //date is autogenerated when inserted into the database (uses timestamp unix epoch)
                                    dbDate = reader.GetInt64(0);
                                    dbResult = reader["testResult"].ToString();
                                    dbFast = int.Parse(reader["fasting"].ToString());
                                    
                                }
                            }
                        }
                        dbConnect.Close();
                    }
                    listBResult.Items.Add(mainModel.fromUnixTime(dbDate).ToShortDateString() +" " + dbResult);
                }
            }
            else
            {
                foreach (long items in retrivedDates)
                {
                    long dbDate = 0;
                    string dbResult = null;
                    int dbFast = 0;

                    using (SQLiteConnection dbConnect = new SQLiteConnection("Data Source=database.sqlite; Version=3;"))
                    {
                        dbConnect.Open();

                        using (SQLiteCommand compareDates = new SQLiteCommand(dbConnect))
                        {
                            SQLiteParameter findDate = new SQLiteParameter();
                            compareDates.CommandText = "SELECT date, testResult, fasting FROM result WHERE date <= @selectedDateValue";
                            compareDates.Parameters.AddWithValue("@selectedDateValue", System.Data.DbType.String).Value = items;
                            using (SQLiteDataReader reader = compareDates.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    //date is autogenerated when inserted into the database (uses timestamp unix epoch)
                                    dbDate = reader.GetInt64(0);
                                    dbResult = reader["testResult"].ToString();
                                    dbFast = int.Parse(reader["fasting"].ToString());

                                }
                            }
                        }
                        dbConnect.Close();
                    }
                    listBResult.Items.Add(mainModel.fromUnixTime(dbDate).ToShortDateString() + " " + dbResult);
                }
            }
           }
        private void btnResult_Click(object sender, EventArgs e)
        {
            mainModel.writeIt(txtResult.Text, isFasting());
            txtResult.Clear();
            chartResults.Series[0].Points.Clear();
            mainModel.chartIt(chartResults, tempStorage);
        }

        private void btnShowDict_Click(object sender, EventArgs e)
        {
            long dbDate = 0;
            string dbResult = null;
            Dictionary<long, string> entries = mainModel.Map;
            foreach(KeyValuePair<long, string> resultPairs in entries)
            {
                dbDate = resultPairs.Key;
                dbResult = resultPairs.Value;
                listBResult.Items.Add(mainModel.fromUnixTime(dbDate).ToShortDateString() + " " + dbResult);
            }
        }

        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void newToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            DialogResult warning = MessageBox.Show("Creating a new database will clear the chart!\nDo you still wish to proceed?", "WARNING!!", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
            if(warning == DialogResult.OK)
            {
                
            }
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            About aboutForm = new About();
            aboutForm.ShowDialog();
        }
        private void openDBDialog()
        {
            OpenFileDialog openDB = new OpenFileDialog();
            openDB.DefaultExt = "sqlite";
            openDB.Filter = "Sqlite files (*.sqlite) |*.sqlite|All Files (*.*) |*.*";
            openDB.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            openDB.Multiselect = false;
            DialogResult openMe = openDB.ShowDialog();
            if (openMe == DialogResult.OK)
            {
                mainModel.readIt(tempStorage);
                mainModel.chartIt(chartResults, tempStorage);

            }
            else
            {
                MessageBox.Show("The database did not load, it may be corrupted or empty.");

            }
        }
        private void saveDBDialog()
        {
            SaveFileDialog saveDB = new SaveFileDialog();
            saveDB.AddExtension = true;
            //saveDB.CheckFileExists = true;
            saveDB.OverwritePrompt = true;
            saveDB.DefaultExt = "sqlite";
            saveDB.Filter = "Sqlite files (*.sqlite) |*.sqlite|All Files (*.*) |*.*";
            saveDB.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            //saveDB.ShowDialog();
            DialogResult saveMe = saveDB.ShowDialog();
            if (saveMe == DialogResult.OK)
            {
                dbcreate(saveDB.FileName);
                mainModel.Database = saveDB.FileName;


            }
        }
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openDBDialog();
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
                   
        }
    }
   
}


  

